from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from pathlib import Path
from typing import Optional
import json
import os


@dataclass(frozen=True)
class File:
    name: str = None  
    content: Optional[str] = None  

    @classmethod
    def from_file(cls, filename: str) -> 'File':
        try:
            if Path(filename).suffix == '.json':
                return cls(
                    name=Path("data.json").name,
                    file_path=Path(filename)
                )
            elif Path(filename).suffix in ['.txt', '.json']:
                content = cls._read_from_file(f"data/{filename}")
                if filename != "data.txt":
                    content.file_path = None
                return content
        except FileNotFoundError:
            raise ValueError("Invalid JSON data in file") from None

    @classmethod
    def from_name(cls, name: str, extension: Optional[str] = None) -> 'File':
        try:
            if Path(filename := f"data/{extension or ''}").exists():
                with open(filename, "r") as f:
                    return cls(
                        name=name,
                        content=json.load(f).get('content'),
                        file_path=Path(filename)
                    )
        except FileNotFoundError:
            raise ValueError("Invalid JSON data in file") from None
        except Exception as e:
            raise ValueError("Failed to load file: " + str(e)) from None

    @classmethod
    def update_content(cls, filename: str) -> 'File':
        original_filename = f"data/{filename}.txt"
        try:
            with open(original_filename, "r") as f:
                content = f.read()
        except FileNotFoundError:
            raise ValueError("File not found")
        cls.write_to_json(f"{filename}.json")
        return cls.from_name(Path(filename).stem)

    @classmethod
    def _read_from_file(cls, filename: str) -> Optional['File']:
        try:
            with open(filename, "r") as file:
                data = json.load(file)
                if 'name' in data and 'content' in data and 'file_path' not in data:
                    return cls.from_name(data['name'], data.get('extension'))
                else:
                    return cls.from_file(Path(filename).stem)
        except FileNotFoundError:
            raise ValueError("Invalid JSON data in file") from None
        except Exception as e:
            raise ValueError("Failed to load file: " + str(e)) from None

    @classmethod
    def write_to_json(cls, filename: str) -> 'File':
        try:
            with open(f"data/{filename}.txt", "w") as f:
                f.write(json.dumps({'name': Path(filename).name, 'content': json.load(f)})
        except Exception as e:
            raise ValueError("Failed to write JSON file: " + str(e)) from None
        return cls.from_name(Path(filename).name)

    @classmethod
    def delete_file(cls, name: str) -> None:
        try:
            os.remove(f"data/{name}.txt")
        except FileNotFoundError:
            raise ValueError("File not found") from None