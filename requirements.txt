from typing import Optional
import json
import os
import pathlib
from abc import ABC, abstractmethod
from dataclasses import dataclass
from file_type_loader import JsonFileTypeLoader, TextFileTypeLoader  # Import from related file


@dataclass
class FileData:
    name: str
    content: str


@dataclass
class FileType:
    extension: str
    loader: 'FileTypeLoader'


class FileTypeLoader(ABC):
    @abstractmethod
    def load(self) -> 'File':
        pass


class JsonFileTypeLoader(FileTypeLoader):
    def load(self) -> 'File':
        try:
            with open("data.json", "r") as file:
                data = json.load(file)
                return File(name=data.get('name', ''), content=data.get('content', ''))  # Use get() to prevent KeyError
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")


class TextFileTypeLoader(FileTypeLoader):
    def load(self) -> 'File':
        try:
            with open("data.txt", "r") as file:
                content = file.read()
            return File(name=pathlib.Path("data.txt").name, content=content)
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")


class FileTypeManager:
    def __init__(self):
        self.file_types = {
            '.json': JsonFileTypeLoader(),
            '.txt': TextFileTypeLoader()
        }

    def get_file_type(self, extension: str) -> 'FileType':
        return self.file_types.get(extension, None)


@dataclass
class File(FileData):  # Improved class definition for better readability and maintainability
    name: str
    content: Optional[str] = None

    @classmethod
    def from_path(cls, filename: str) -> 'File':
        if not os.path.exists(filename):
            raise FileNotFoundError(f"File {filename} does not exist")

        file_type_manager = FileTypeManager()
        file_type = file_type_manager.get_file_type(os.path.splitext(filename)[1])
        return cls.from_extension(file_type)

    @classmethod
    def from_extension(cls, extension: str) -> 'File':
        if extension == '.json':
            return cls.from_json()
        elif extension == '.txt':
            return cls.from_text_file()

    @classmethod
    def from_json(cls) -> 'File':
        try:
            with open("data.json", "r") as file:
                data = json.load(file)
                return cls(name=data.get('name', ''), content=data.get('content', ''))  # Use get() to prevent KeyError
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    @classmethod
    def from_text_file(cls) -> 'File':
        try:
            with open("data.txt", "r") as file:
                content = file.read()
            return cls(name=pathlib.Path("data.txt").name, content=content)
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    def save_to_json(self, filename: str):
        data = {'name': self._name, 'content': self._content}
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)

    @classmethod
    def read_from_file(cls, filename: str) -> Optional['File']:
        try:
            content = cls.FileIO.read_file(filename)
            if not content:
                return None
            return cls(name=pathlib.Path(filename).name, content=content)
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")


    @classmethod
    def update_content(cls, name: str, new_content: Optional[str] = None) -> 'File':
        try:
            existing_content = cls.FileManagement.read_file(f"data/{name}.txt")
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

        if new_content is not None:
            cls.FileManagement.write_file(f"data/{name}.txt", new_content)
        
        return cls.from_path(f"data/{name}.txt")


    @classmethod
    def delete_file(cls, name: str) -> None:
        try:
            os.remove(f"data/{name}.txt")
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")