from typing import Optional
import json
import os

class File:
    def __init__(self, name: str, content: str):
        self._name = name
        self._content = content

    @classmethod
    def from_json(cls, filename: str) -> 'File':
        with open(filename, 'r') as file:
            data = json.load(file)
            return cls(name=data['name'], content=data['content'])

    @classmethod
    def from_text(cls, filename: str, content: Optional[str] = None) -> 'File':
        if not os.path.exists(filename):
            raise FileNotFoundError(f"File {filename} does not exist")
        with open(filename, 'r') as file:
            file_content = file.read()
        return cls(name=filename, content=file_content) if content is None else cls(name=filename, content=content)

    def save_to_json(self, filename: str):
        data = {'name': self._name, 'content': self._content}
        with open(filename, 'w') as file:
            json.dump(data, file)

    def __str__(self) -> str:
        return f"{self._name}: {self._content}"

    @classmethod
    def from_file(cls, filename: str) -> 'File':
        try:
            return cls.from_text(filename)
        except FileNotFoundError:
            raise ValueError(f"Failed to load file {filename}")