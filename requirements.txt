from typing import Optional

class File:
    def __init__(self, name: str, content: str):
        self.name = name
        self.content = content

    @classmethod
    def from_json(cls, filename: str) -> 'File':
        with open(filename, 'r') as file:
            data = file.read()
            return cls(name=f"{filename}.txt", content=data)

    @classmethod
    def from_text(cls, filename: str, content: Optional[str] = None) -> 'File':
        if content is not None:
            return cls(name=filename, content=content)
        raise ValueError("Content must be provided")

    def save_to_json(self, filename: str):
        with open(filename, 'w') as file:
            file.write(self.content)

    def __str__(self) -> str:
        return f"{self.name}: {self.content}"