from typing import Optional
import json
import os
import pathlib

class File:
    def __init__(self, name: str, content: str):
        self._name = name
        self._content = content

    @classmethod
    def from_path(cls, filename: str) -> 'File':
        if not os.path.exists(filename):
            raise FileNotFoundError(f"File {filename} does not exist")
        return cls.from_extension(os.path.splitext(filename)[1])

    @classmethod
    def from_extension(cls, extension: str) -> 'File':
        try:
            if extension == '.json':
                return cls.from_json()
            elif extension == '.txt':
                return cls.from_text_file()
            else:
                raise ValueError(f"Unsupported file type: {extension}")
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    @classmethod
    def from_json(cls) -> 'File':
        try:
            with open("data.json", "r") as file:
                data = json.load(file)
                return cls(name=data.get('name', ''), content=data.get('content', ''))  # Use get() to prevent KeyError
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    @classmethod
    def from_text_file(cls) -> 'File':
        try:
            with open("data.txt", "r") as file:
                content = file.read()
            return cls(name=pathlib.Path("data.txt").name, content=content)
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    def save_to_json(self, filename: str):
        data = {'name': self._name, 'content': self._content}
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)

    def __str__(self) -> str:
        return f"{self._name}: {self._content}"