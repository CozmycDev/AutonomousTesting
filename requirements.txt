from typing import Optional
import json
import os
import pathlib
from abc import ABC, abstractmethod
from dataclasses import dataclass
from file_type_loader import JsonFileTypeLoader, TextFileTypeLoader


@dataclass(frozen=True)
class File:
    name: str
    content: Optional[str] = None

    @classmethod
    def from_path(cls, filename: str) -> 'File':
        if not os.path.exists(filename):
            raise FileNotFoundError(f"File {filename} does not exist")
        
        file_type_manager = FileTypeManager()
        file_extension = pathlib.Path(filename).suffix[1:]  # Extract file extension

        return cls.from_extension(file_extension)

    @classmethod
    def from_extension(cls, extension: str) -> 'File':
        if extension == '.json':
            return cls.from_json_data()
        elif extension == '.txt':
            return cls.from_text_file()

    @classmethod
    def from_json_data(cls) -> 'File':
        try:
            with open("data.json", "r") as file:
                data = json.load(file)
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

        name = data.get('name', '')
        content = data.get('content')

        return cls(name=name, content=content)

    @classmethod
    def from_text_file(cls) -> 'File':
        try:
            with open("data.txt", "r") as file:
                content = file.read()
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

        return cls(name=pathlib.Path("data.txt").name, content=content)

    @classmethod
    def update_content(cls, name: str, new_content: Optional[str] = None) -> 'File':
        try:
            original_file = cls.read_from_file(f"data/{name}.txt")
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

        if new_content is not None:
            cls.write_to_json(f"data/{name}.txt", new_content)

        return cls.from_path(f"data/{name}.txt")

    @classmethod
    def write_to_json(cls, filename: str, content: Optional[str] = None) -> 'File':
        data = {'name': pathlib.Path(filename).name, 'content': content}
        
        try:
            with open(filename, "w") as file:
                json.dump(data, file, indent=4)
        except Exception as e:
            raise ValueError(f"Failed to write to file: {str(e)}")

    @classmethod
    def read_from_file(cls, filename: str) -> Optional['File']:
        try:
            return cls.read_json(f"data/{filename}")
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    @classmethod
    def read_json(cls, filename: str) -> Optional[str]:
        try:
            with open(filename, "r") as file:
                data = json.load(file)
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

        return data.get('content')

    @classmethod
    def delete_file(cls, name: str) -> None:
        try:
            os.remove(f"data/{name}.txt")
        except Exception as e:
            raise ValueError(f"Failed to delete file: {str(e)}")