from abc import ABC, abstractmethod
from dataclasses import dataclass, field
from pathlib import Path
from typing import Optional
import json
import os


@dataclass(frozen=True)
class File:
    name: str
    content: Optional[str] = None
    file_path: Optional[Path] = None

    @classmethod
    def from_file(cls, filename: str) -> 'File':
        if Path(filename).suffix == '.json':
            return cls(
                name=Path("data.json").name,
                content=None,
                file_path=Path(filename)
            )
        elif Path(filename).suffix in ['.txt', '.json']:
            try:
                data = json.load(open(Path("data.json"), 'r'))
                if Path(filename).suffix == '.txt':
                    return cls(
                        name=Path("data.txt").name,
                        content=os.read(open(f"data/{filename}", 'rb'), os.path.getsize(f"data/{filename}")),
                        file_path=None
                    )
                else:
                    with open(f"data/{filename}", 'r') as f:
                        try:
                            data = json.load(f)
                            return cls(
                                name=data['name'],
                                content=data.get('content'),
                                file_path=Path(filename)
                            )
                        except KeyError:
                            raise ValueError("Invalid JSON data in file")
            except FileNotFoundError:
                raise ValueError(f"File not found: {filename}")
            except Exception as e:
                raise ValueError(f"Failed to load file: {str(e)}")

    @classmethod
    def from_name(cls, name: str, extension: Optional[str] = None) -> 'File':
        return cls(
            name=name,
            content=None if Path(name).expanduser() == Path("data.json") else json.load(open(f"data/{extension or ''}", "r")),
            file_path=Path(filename)
        )

    @classmethod
    def update_content(cls, filename: str) -> 'File':
        with open(f"data/{filename}.txt", "r") as f:
            original_content = f.read()
        try:
            cls.write_to_json(f"data/{filename}.txt", os.read(open(f"data/{filename}", 'rb'), os.path.getsize(f"data/{filename}")))
        except FileNotFoundError:
            raise ValueError(f"File not found: {filename}")
        return cls.from_file(Path(filename).stem)

    @classmethod
    def _read_from_file(cls, filename: str) -> Optional['File']:
        try:
            with open(filename, "r") as file:
                data = json.load(file)
                if 'name' in data and 'content' in data:
                    return cls.from_name(data['name'], data.get('extension'))
                else:
                    return cls.from_file(Path(filename).stem)
        except FileNotFoundError:
            raise ValueError(f"File not found: {filename}")
        except Exception as e:
            raise ValueError(f"Failed to load file: {str(e)}")

    @classmethod
    def write_to_json(cls, filename: str) -> 'File':
        try:
            with open(filename, "w") as f:
                json.dump({'name': Path(filename).name, 'extension': '.json'}, f, indent=4)
        except Exception as e:
            raise ValueError(f"Failed to write JSON file: {str(e)}")
        return cls.from_name(Path(filename).name)

    @classmethod
    def delete_file(cls, name: str) -> None:
        try:
            os.remove(f"data/{name}.txt")
        except FileNotFoundError:
            raise ValueError(f"File not found: {name}")