from typing import Optional
import json
import os

class File:
    def __init__(self, name: str, content: str):
        self._name = name
        self._content = content

    @classmethod
    def from_path(cls, filename: str) -> 'File':
        if not os.path.exists(filename):
            raise FileNotFoundError(f"File {filename} does not exist")
        file_extension = os.path.splitext(filename)[1]
        if file_extension == '.json':
            return cls.from_json(filename)
        elif file_extension == '.txt':
            return cls.from_text_file(filename)
        else:
            raise ValueError(f"Unsupported file type: {file_extension}")

    @classmethod
    def from_json(cls, filename: str) -> 'File':
        with open(filename, 'r') as file:
            data = json.load(file)
            return cls(name=data['name'], content=data.get('content', ''))

    @classmethod
    def from_text_file(cls, filename: str) -> 'File':
        try:
            with open(filename, 'r') as file:
                file_content = file.read()
            return cls(name=filename, content=file_content)

        except Exception as e:
            raise ValueError(f"Failed to load file {filename}: {str(e)}")

    def save_to_json(self, filename: str):
        data = {'name': self._name, 'content': self._content}
        with open(filename, 'w') as file:
            json.dump(data, file, indent=4)

    def __str__(self) -> str:
        return f"{self._name}: {self._content}"