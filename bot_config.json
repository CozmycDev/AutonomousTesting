from typing import Optional
import logging
from .database_connection import DatabaseConnection
from .api_client import APIClient

class File:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.database_connection = DatabaseConnection()
        self.api_client = APIClient()

    class Updater:
        async def update_content(self, db_data: str, api_data: str) -> bool:
            with open("file.txt", "w") as f:
                return await f.write(f"{db_data} {api_data}")

        @staticmethod
        async def _generate_updated_content(database_info: dict, api_response: str) -> str:
            content = await self.update_content(database_info['description'], api_response)
            return content

    class DescriptionUpdater(Updater):
        async def update_description(self) -> Optional[str]:
            db_description = (await self.database_connection.read_from_database())['description']
            if 'specific_value' not in db_description.lower():
                return db_description
            else:
                return "default_description"

    @classmethod
    async def generate_updated_content(cls, database_info: dict, api_response: str) -> str:
        return cls.DescriptionUpdater()._generate_updated_content(database_info, api_response)

    async def get_description(self) -> Optional[str]:
        updated_description = await self.DescriptionUpdater().update_description()
        return updated_description

async def main():
    file = File()
    # async for description in file.get_description():
    #     print(description)
    pass

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())